# =============================================================================
# Nome file: ScreenCaputre.py
# Autore: Vincenzo Scozzaro
# Repository: https://github.com/scozzaro/
#
# Copyright (c) 2025 Vincenzo Scozzaro
#
# Questo file è distribuito secondo i termini della Mozilla Public License, v. 2.0.
# Puoi ottenere una copia della licenza all'indirizzo: https://mozilla.org/MPL/2.0/
#
# In base a questa licenza:
# - Sei libero di usare, modificare e distribuire questo file, anche in progetti commerciali.
# - Le modifiche a questo file devono essere rilasciate sotto MPL 2.0.
# - Devono essere mantenuti i riferimenti all’autore e alla licenza.
#
# Il codice è fornito "così com'è", senza garanzie di alcun tipo.
# =============================================================================


import tkinter as tk
from PIL import ImageGrab
import os


class ScreenCaptureApp:
    def __init__(self, master):
        self.master = master
        master.title("Cattura Schermo Semplice")

        self.capture_button = tk.Button(master, text="Cattura", command=self.start_capture)
        self.capture_button.pack(pady=20)

        self.capture_window = None
        self.canvas = None
        self.start_x = None
        self.start_y = None
        self.end_x = None
        self.end_y = None
        self.selection_rect = None
        self.full_screenshot = None  # Immagine completa dello schermo originale

    def start_capture(self):
        # Cattura l'intero schermo prima di aprire la finestra opaca
        self.full_screenshot = ImageGrab.grab()

        self.master.withdraw()  # Nasconde la finestra principale

        # Crea una finestra trasparente a schermo intero per la selezione
        self.capture_window = tk.Toplevel(self.master)
        self.capture_window.attributes("-fullscreen", True)
        self.capture_window.attributes("-alpha", 0.2)  # Schermo opaco per la selezione

        self.canvas = tk.Canvas(self.capture_window, cursor="crosshair")
        self.canvas.pack(fill="both", expand=True)

        self.canvas.bind("<ButtonPress-1>", self.on_press)
        self.canvas.bind("<B1-Motion>", self.on_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)

        self.canvas.update()

    def on_press(self, event):
        self.start_x = self.canvas.canvasx(event.x)
        self.start_y = self.canvas.canvasy(event.y)
        if self.selection_rect:
            self.canvas.delete(self.selection_rect)
            self.selection_rect = None

    def on_drag(self, event):
        cur_x = self.canvas.canvasx(event.x)
        cur_y = self.canvas.canvasy(event.y)

        x1, y1 = (min(self.start_x, cur_x), min(self.start_y, cur_y))
        x2, y2 = (max(self.start_x, cur_x), max(self.start_y, cur_y))

        if not self.selection_rect:
            self.selection_rect = self.canvas.create_rectangle(
                x1, y1, x2, y2, outline="red", width=5)
        else:
            self.canvas.coords(self.selection_rect, x1, y1, x2, y2)

    def on_release(self, event):
        self.end_x = self.canvas.canvasx(event.x)
        self.end_y = self.canvas.canvasy(event.y)

        x1 = int(min(self.start_x, self.end_x))
        y1 = int(min(self.start_y, self.end_y))
        x2 = int(max(self.start_x, self.end_x))
        y2 = int(max(self.start_y, self.end_y))

        bbox = (x1, y1, x2, y2)
        self.capture_and_save(bbox)

        self.capture_window.destroy()  # Chiude la finestra di selezione

    def capture_and_save(self, bbox):
        try:
            # Ritaglia l'immagine originale non opaca
            cropped = self.full_screenshot.crop(bbox)
            user_home = os.path.expanduser("~")
            FilePath = os.path.join(user_home, "temp.jpg")
            cropped.save(FilePath)

            self.master.deiconify()  # Rende visibile la finestra principale
            print(f"Cattura salvata in: {FilePath}")
        except Exception as e:
            print(f"Errore durante la cattura o il salvataggio dello schermo: {e}")
            self.master.deiconify()


if __name__ == "__main__":
    root = tk.Tk()
    app = ScreenCaptureApp(root)
    root.mainloop()
